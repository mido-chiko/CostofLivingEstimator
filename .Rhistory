return(df_final_lrt_cont)
})
raw_data_report_table_lrt_p <- eventReactive(input$query_text_run_lrt, {
progress <- shiny::Progress$new()
on.exit(progress$close())
path <- input$raw_data_path_text
# raw <- raw_data_selected_table()
raw <- values()
for(i in unique(raw$file)){
# assign(i , read_sas(paste(path, i, sep = '/')))
# print(i)
str <- strsplit(i, '.', fixed = TRUE)
# assign(str[[1]][1], read_sas(paste(path, i, sep = '/')))
assign(str[[1]][1], read.sas7bdat(paste(path, i, sep = '/')))
print(str[[1]][1])
progress$inc(1/length(unique(raw$file)), detail = paste("Querying from ", i))
}
print(nchar(input$query_text))
print(nchar(input$query_text_cont))
if(nchar(input$query_text) > 5 && nchar(input$query_text_cont) > 5) {
data_cat <- raw_data_report_table_lrt()
data_cont <- raw_data_report_table_lrt_cont()
data_cat <- sqldf('select SITENAME, nidot as Size, pvalue, Factor from data_cat')
data_cont <- sqldf('select SITE_ID as SITENAME, "" as Size, [pv.adj] as pvalue, Factor from data_cont')
pm_cat <- spread(data_cat, key = "Factor", value = "pvalue")
pm_cont <- spread(data_cont, key = "Factor", value = "pvalue")
if(ncol(pm_cont) > 3){
str <- paste(names(pm_cont[, 3: ncol(pm_cont)]), collapse  = ',b.')
}
if(ncol(pm_cont) == 3) {
str <- names(pm_cont[3])
}
pm <- sqldf(paste0('select a.* , b.', str, ' from pm_cat a join pm_cont b on a.SITENAME = b.SITENAME'))
pm <- pm[order(pm$Size, decreasing=TRUE),]
pm <- as.data.frame(round(sapply(pm, as.numeric),3))
pmm <- pm
# pmm[, 3:ncol(pmm)] <- as.data.frame(apply(pmm[, 3:ncol(pmm) ], 2, function(x) {x <- recode(x,"0:0.05=1; 0.05:1=0"); x}))
pmm[, 3:ncol(pmm)] <- as.data.frame(apply(pmm[, 3:ncol(pmm) ], 2, function(x) {ifelse(x <= 0.05 , 1, 0)}))
pmm$signal <- rowSums(pmm[, 3:ncol(pmm)])
pmm$ntrt <- pmm$signal
pmm$nidot <- length(pmm[, 3:(ncol(pmm)-2)] )
pmm$ndotj <- sum(pmm$ntrt)
pmm$ndotdot <- sum(pmm$nidot)
pm_lrt_raw <- sqldf('select SITENAME, ntrt, nidot, ndotj, ndotdot from pmm')
pm_lrt_rank <- fLRT( pm_lrt_raw, 10000)
drops <- c('Size')
pm_fisher_raw <-  pm[ , !(names(pm) %in% drops)]
pm_fisher_rank <- pv.fisher.boot(n.boot= 1000, pmatrix=pm_fisher_raw)
pm_final <- sqldf('select pm.*, pmm.signal, pm_lrt_rank.pvalue as Method1_pvalue, pm_fisher_rank.[pv.fisher] as Method2_pvalue from pm left join pmm on pm.SITENAME = pmm.SITENAME left join pm_lrt_rank on pm.SITENAME = pm_lrt_rank.SITENAME left join pm_fisher_rank on pm.SITENAME = pm_fisher_rank.SITENAME order by pm_fisher_rank.[pv.fisher], pm.size desc')
pm_final[, 3:(ncol(pm_final) )] <- round(sapply(pm_final[, 3:(ncol(pm_final) )], as.numeric),3)
}
if(nchar(input$query_text) > 5 && nchar(input$query_text_cont) < 5){
data_cat <- raw_data_report_table_lrt()
# data_cont <- raw_data_report_table_lrt_cont()
data_cat <- sqldf('select SITENAME, nidot as Size, pvalue, Factor from data_cat')
# data_cont <- sqldf('select SITE_ID as SITENAME, "" as Size, pv as pvalue, Factor from data_cont')
pm_cat <- spread(data_cat, key = "Factor", value = "pvalue")
pm <- pm_cat
pm <- pm[order(pm$Size, decreasing=TRUE),]
pm <- as.data.frame(round(sapply(pm, as.numeric),3))
pmm <- pm
pmm[, 3:ncol(pmm)] <- as.data.frame(apply(pmm[, 3:ncol(pmm) ], 2, function(x) {x <- recode(x,"0:0.05=1; 0.05:1=0"); x}))
pmm$signal <- rowSums(pmm[, 3:ncol(pmm)])
pmm$ntrt <- pmm$signal
pmm$nidot <- length(pmm[, 3:(ncol(pmm)-2)] )
pmm$ndotj <- sum(pmm$ntrt)
pmm$ndotdot <- sum(pmm$nidot)
pm_lrt_raw <- sqldf('select SITENAME, ntrt, nidot, ndotj, ndotdot from pmm')
pm_lrt_rank <- fLRT( pm_lrt_raw, 10000)
drops <- c('Size')
pm_fisher_raw <-  pm[ , !(names(pm) %in% drops)]
pm_fisher_rank <- pv.fisher.boot(n.boot= 1000, pmatrix=pm_fisher_raw)
pm_final <- sqldf('select pm.*, pmm.signal, pm_lrt_rank.pvalue as Method1_pvalue, pm_fisher_rank.[pv.fisher] as Method2_pvalue from pm left join pmm on pm.SITENAME = pmm.SITENAME left join pm_lrt_rank on pm.SITENAME = pm_lrt_rank.SITENAME left join pm_fisher_rank on pm.SITENAME = pm_fisher_rank.SITENAME order by pm_fisher_rank.[pv.fisher], pm.size desc')
pm_final[, 3:(ncol(pm_final))] <- round(sapply(pm_final[, 3:(ncol(pm_final) )], as.numeric),3)
}
if(nchar(input$query_text) == 0 && nchar(input$query_text_cont) != 0) {
# data_cat <- raw_data_report_table_lrt()
data_cont <- raw_data_report_table_lrt_cont()
# data_cat <- sqldf('select SITENAME, nidot as Size, pvalue, Factor from data_cat')
data_cont <- sqldf('select SITE_ID as SITENAME,  [pv.adj] as pvalue, Factor from data_cont')
# pm_cat <- spread(data_cat, key = "Factor", value = "pvalue")
pm_cont <- spread(data_cont, key = "Factor", value = "pvalue")
# str <- paste(names(pm_cont[, 3: ncol(pm_cont)]), collapse  = ',b.')
pm <- pm_cont
# pm <- sqldf(paste0('select a.* , b.', str, ' from pm_cat a join pm_cont b on a.SITENAME = b.SITENAME'))
# pm <- pm[order(pm$Size, decreasing=TRUE),]
pm <- as.data.frame(round(sapply(pm, as.numeric),3))
pm_fisher_rank <- pv.fisher.boot(n.boot= 1000, pmatrix=pm)
pm_final <- pm_fisher_rank
# pm_final <- sqldf('select pm.*, pmm.signal, pm_lrt_rank.pvalue as Method1_pvalue, pm_fisher_rank.[pv.fisher] as Method2_pvalue from pm left join pmm on pm.SITENAME = pmm.SITENAME left join pm_lrt_rank on pm.SITENAME = pm_lrt_rank.SITENAME left join pm_fisher_rank on pm.SITENAME = pm_fisher_rank.SITENAME order by pm_fisher_rank.[pv.fisher], pm.size desc')
}
return(pm_final)
})
##################################################
out_d3 <- eventReactive(input$raw_data_load, {
data <- values()
data1 <- data.frame(name = paste0(data$vars, '(', data$label, ')'), parent = data$file)
data2 <- data.frame(name = unique(data$file), parent = 'Submission')
data3 <- data.frame(name = 'Submission', parent = 'null')
out <- rbind(data1, data2,data3)
out <- toJSON(unname(split(out, 1:nrow(out))))
})
observe({
# write.csv(out_d3(), file = 'O:/IT/LRT_BIMO_V2/app/www/d3vis.csv', row.names = FALSE)
session$sendCustomMessage(type="jsondata",out_d3())
# input$selectedNames
})
observe({
updateTextAreaInput(session, "query_text", value = input$sqlstring)
updateTextAreaInput(session, "query_text_cont", value = input$sqlstring_cont)
})
###################################################
###Download Functions##############################
output$report <- downloadHandler(
# filename = "LRT_Report.html",
filename = "LRT_Report.docx",
# filename = "LRT_Report.pdf",
content = function(file) {
tempReport <- file.path(tempdir(), "LRT_Report.Rmd")
tempReport2 <- file.path(tempdir(), "logo.jpg")
# tempReport <- file.path( "C:/Users/Public/LRT_Report.Rmd")
file.copy("LRT_Report.Rmd", tempReport, overwrite = TRUE)
file.copy("logo.jpg", tempReport2, overwrite = TRUE)
if(nchar(input$query_text_cont) > 5) {
params <- list(
n = raw_data_report_table_lrt(),
m = raw_data_report_table_lrt_cont(),
f = raw_data_report_table_lrt_p()
)
}else{
params <- list(
n = raw_data_report_table_lrt(),
m = '',
f = raw_data_report_table_lrt_p()
)
}
rmarkdown::render(tempReport,
output_file = file,
word_document(),
# pdf_document(),
# html_document(),
params = params,
envir = new.env(parent = globalenv())
)
}
)
output$report1 <- downloadHandler(
# filename = "LRT_Report.html",
filename = "Sum_of_Rate_Report.docx",
# filename = "LRT_Report.pdf",
content = function(file) {
tempReport <- file.path(tempdir(), "SR_Report.Rmd")
tempReport2 <- file.path(tempdir(), "logo.jpg")
# tempReport <- file.path( "C:/Users/Public/LRT_Report.Rmd")
file.copy("SR_Report.Rmd", tempReport, overwrite = TRUE)
file.copy("logo.jpg", tempReport2, overwrite = TRUE)
params <- list(
m = raw_data_report_table()
)
rmarkdown::render(tempReport,
output_file = file,
word_document(),
# pdf_document(),
# html_document(),
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
#################################################################################################
source('~/R/Code/IRR Data Science Build/Shiny Apps/LRT APP/app_v3.R', echo=TRUE)
source('~/R/Code/IRR Data Science Build/Shiny Apps/LRT APP/app_v3.R', echo=TRUE)
rmarkdown::render(tempReport,
output_file = file,
word_document(),
# pdf_document(),
# html_document(),
params = params,
envir = new.env(parent = globalenv())
)
output$report1 <- downloadHandler(
# filename = "LRT_Report.html",
filename = "Sum_of_Rate_Report.docx",
# filename = "LRT_Report.pdf",
content = function(file) {
tempReport <- file.path(tempdir(), "SR_Report.Rmd")
tempReport2 <- file.path(tempdir(), "logo.jpg")
# tempReport <- file.path( "C:/Users/Public/LRT_Report.Rmd")
file.copy("SR_Report.Rmd", tempReport, overwrite = TRUE)
file.copy("logo.jpg", tempReport2, overwrite = TRUE)
params <- list(
m = raw_data_report_table()
)
rmarkdown::render(tempReport,
output_file = file,
word_document(),
# pdf_document(),
# html_document(),
params = params,
envir = new.env(parent = globalenv())
)
}
)
packages <- c("shiny", "shinydashboard", "sqldf", "plotly", "DT", "haven", "purrr", "labelled", "rjson", "rmarkdown", "knitr", "tidyr", "car", "FSA", "lme4", "sas7bdat", "dplyr")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
source('global.R', local=TRUE)
search()
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
goods=goods %>%
filter(MarketName=="Atlanta, GA")
goods
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
goods
unique(x$Classification)
goods <- fread(file = "goods.csv")
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
goods
goods %>% filter(MarketName,Classification,MonthlyCost) %>%
summarise(
AvgCityTypeCost = mean(MonthlyCost,na.rm =TRUE),
Index = (MonthlyCost/mean(MonthlyCost,na.rm =TRUE)*100))
goods %>%
summarise(
AvgCityTypeCost = mean(MonthlyCost,na.rm =TRUE),
Index = (MonthlyCost/mean(MonthlyCost,na.rm =TRUE)*100))
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
install.packages("PASWR")
head(titanic3)
Titanic
titanic3
titanic3
titanic3
library(MASS)
head(cats)
ggplot(cats, x = Bwt, y = Hwt, color = Sex)
ggplot2(cats, x = Bwt, y = Hwt, color = Sex)
ggplot(cats, aes(x=Bwt, y=Hwt)) + geom_point(size=2, shape=23)
geom_point(size=2, shape=23)
ggplot(cats, aes(x=Bwt, y=Hwt)) + geom_point(size=2, shape=23)
library(ggplot2)
ggplot(cats, aes(x=Bwt, y=Hwt)) + geom_point(size=2, shape=23)
ggplot(cats, aes(x=Bwt, y=Hwt),shape=cyl, color=cyl, size=cyl)
+ geom_point(size=2, shape=23)
ggplot(cats, aes(x=Bwt, y=Hwt),shape=cyl, size=Sex)
+ geom_point(size=2, shape=23)
ggplot(cats, aes(x=Bwt, y=Hwt),shape=cyl, size=Sex)
+ geom_point(size=2, shape=23)
ggplot(cats, aes(x=Bwt, y=Hwt),shape=cyl, size=Sex) + geom_point(size=2, shape=23)
ggplot(cats, aes(x=Bwt, y=Hwt),shape=cyl, color=Sex) + geom_point(size=2, shape=23)
ggplot(cats, aes(x=Bwt, y=Hwt),color=Sex) + geom_point(size=2, shape=23)
ggplot(cats, aes(x=Bwt, y=Hwt)) + geom_point(size=2, color=Sex)
ggplot(cats, aes(x=Bwt, y=Hwt)) + geom_point(size=2, color=cats$Sex)
ggplot(cats, aes(x=Bwt, y=Hwt),color=Sex) + geom_point(size=2)
ggplot(cats, aes(x=Bwt, y=Hwt,color=Sex)) + geom_point(size=2)
ggplot(cats, aes(x=Bwt, y=Hwt,color=Sex)) + geom_point(size=2,shape=23)
ggplot(cats, aes(x=Bwt, y=Hwt,color=Sex)) + geom_point(size=2)
ggplot(cats, aes(x=Bwt, y=Hwt,color=Sex)) + geom_point(size=2)  +
geom_smooth(method=lm)
#Basic numerical EDA for cars dataset.
summary(cats) #Five number summaries.
sapply(cats, sd)
cor(cats)
hist(cats$Bwt, xlab = "BodyWeight", main = "Height")
hist(cats$Bwt, xlab = "BodyWeight", main = "Body Weight Distribution")
hist(cars$dist, Hwt = "Height", main = "Histogram of Heigt")
ggplot(cats, aes(x=Bwt, y=Hwt,color=Sex)) + geom_point(size=2)
library(PASWR)
titanic3
head(titanic3)
is.na(titanic3)
titanic3 %>%
select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.))))
library(dplyr)
library(dplyr)
titanic3 %>%
select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.))))
head(titanic3)
summary(titanic3)
titanic3 %>%
select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.))))
len(titanic3)
length(titanic3)
nrow(titanic3)
help(state.x77)
state.x77 #Investigating the state.x77 dataset.
states = as.data.frame(state.x77)
colnames(states)[4] = "Life.Exp"
colnames(states)[6] = "HS.Grad"
colnames(states)[4]
states[,8]
stats[,9]
states[,9]
states[,9] = (states$Population*1000)/states$Area
colnames(states)[9] = "Density"
summary(states)
cor(states)
plot(states)
model.saturated = lm(Life.Exp ~ ., data = states)
summary(model.saturated) #Many predictor variables are not significant, yet the
plot(model.saturated) #Assessing the assumptions of the model.
influencePlot(model.saturated)
library(car)
influencePlot(model.saturated)
vif(model.saturated)
avPlots(model.saturated)
model2 = lm(Life.Exp ~ . - Illiteracy, data = states)
plot(model2)
summary(model2)
influencePlot(model2)
anova(model2, model.saturated)
influencePlot(model2)
plot(model2)
avPlots(model.saturated)
summary(model)
summary(model1)
summary(model.saturated)
model.full = lm(Life.Exp ~ ., data = states)
model.reduced = lm(Life.Exp ~ . - Illiteracy - Area - Income, data = states)
anova(model.reduced, model.full) #The p-value is quite large; thus, the reduced
model.reduced = lm(Life.Exp ~ . - Illiteracy - Area - Income - Frost, data = states)
anova(model.reduced, model.full) #The p-value is quite large; thus, the reduced
model.reduced = lm(Life.Exp ~ . - Illiteracy - Area, data = states)
anova(model.reduced, model.full)
summary(model.reduced)
vif(model.reduced)
plot(model.reduced)
BIC(model.full,
model2,
model.reduced)
AIC(model.full,    #Model with all variables.
model2,        #Model with all variables EXCEPT Illiteracy.
model.reduced)
library(MASS) #The Modern Applied Statistics library.
model.empty = lm(Life.Exp ~ 1, data = states) #The model with an intercept ONLY.
model.full = lm(Life.Exp ~ ., data = states) #The model with ALL variables.
scope = list(lower = formula(model.empty), upper = formula(model.full))
forwardAIC = step(model.empty, scope, direction = "forward", k = 2)
backwardAIC = step(model.full, scope, direction = "backward", k = 2)
bothAIC.empty = step(model.empty, scope, direction = "both", k = 2)
bothAIC.full = step(model.full, scope, direction = "both", k = 2)
tests = read.table("MLRtest.txt")
setwd("~/NYCDSA/Bootcamp/Lecture Slides")
tests = read.table("MLRtest.txt")
summary(tests)
sd(tests$Test.Score)
sd(tests$Hours.Studied)
cor(tests$Test.Score, tests$Hours.Studied)
plot(tests$Hours.Studied, tests$Test.Score)
model.simple = lm(Test.Score ~ Hours.Studied, data = tests)
summary(model.simple) #Investigating the model and assessing some diagnostics.
plot(model.simple)
newdata = data.frame(Hours.Studied = seq(1, 3, length = 100))
conf.band = predict(model.simple, newdata, interval = "confidence")
pred.band = predict(model.simple, newdata, interval = "prediction")
plot(tests$Hours.Studied, tests$Test.Score,
xlab = "Hours Studied", ylab = "Test Score",
main = "Simple Linear Regression Model\nTests Dataset")
abline(model.simple, lty = 2)
lines(newdata$Hours.Studied, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(newdata$Hours.Studied, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(newdata$Hours.Studied, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(newdata$Hours.Studied, pred.band[, 3], col = "red") #Plotting the upper prediction band.
legend("topleft", c("Regression Line", "Conf. Band", "Pred. Band"),
lty = c(2, 1, 1), col = c("black", "blue", "red"))
plot(tests$Hours.Studied, tests$Test.Score,
xlab = "Hours Studied", ylab = "Test Score",
main = "Simple Linear Regression Model\nTests Dataset")
abline(model.simple, lty = 2)
lines(newdata$Hours.Studied, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(newdata$Hours.Studied, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(newdata$Hours.Studied, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(newdata$Hours.Studied, pred.band[, 3], col = "red") #Plotting the upper prediction band.
model.quadratic = lm(Test.Score ~ Hours.Studied + I(Hours.Studied^2), data = tests)
summary(model.quadratic) #Investigating the model and assessing some diagnostics.
plot(model.quadratic)
#Constructing confidence and prediction bands for the scope of our data.
conf.band = predict(model.quadratic, newdata, interval = "confidence")
pred.band = predict(model.quadratic, newdata, interval = "prediction")
#Constructing confidence and prediction bands for the scope of our data.
conf.band = predict(model.quadratic, newdata, interval = "confidence")
pred.band = predict(model.quadratic, newdata, interval = "prediction")
plot(tests$Hours.Studied, tests$Test.Score,
xlab = "Hours Studied", ylab = "Test Score",
main = "Quadratic Regression Model\nTests Dataset")
lines(tests$Hours.Studied[order(tests$Hours.Studied)],
model.quadratic$fitted.values[order(tests$Hours.Studied)], lty = 2)
lines(newdata$Hours.Studied, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(newdata$Hours.Studied, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(newdata$Hours.Studied, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(newdata$Hours.Studied, pred.band[, 3], col = "red") #Plotting the upper prediction band.
legend("topleft", c("Regression Line", "Conf. Band", "Pred. Band"),
lty = c(2, 1, 1), col = c("black", "blue", "red"))
model.factor = lm(Test.Score ~ Hours.Studied + Gender, data = tests)
summary(model.factor) #Investigating the model and assessing some diagnostics.
plot(model.factor)
plot(tests$Hours.Studied, tests$Test.Score, col = col.vec,
xlab = "Hours Studied", ylab = "Test Score",
main = "Linear Regression Model w/ Factor\nTests Dataset")
abline(model.factor$coefficients[1], #Intercept for females.
model.factor$coefficients[2], #Slope for females.
lwd = 3, lty = 2, col = "pink")
abline(model.factor$coefficients[1] + model.factor$coefficients[3], #Intercept for males.
model.factor$coefficients[2], #Slope for males.
lwd = 3, lty = 2, col = "blue")
col.vec = c(rep("pink", 250), rep("blue", 250))
plot(tests$Hours.Studied, tests$Test.Score, col = col.vec,
xlab = "Hours Studied", ylab = "Test Score",
main = "Linear Regression Model w/ Factor\nTests Dataset")
abline(model.factor$coefficients[1], #Intercept for females.
model.factor$coefficients[2], #Slope for females.
lwd = 3, lty = 2, col = "pink")
abline(model.factor$coefficients[1] + model.factor$coefficients[3], #Intercept for males.
model.factor$coefficients[2], #Slope for males.
lwd = 3, lty = 2, col = "blue")
legend("topleft", c("Female Regression", "Male Regression"),
lwd = 3, lty = 2, col = c("pink", "blue"))
shiny::runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/example')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
goods$MonthlySalary
goods$MonthlySalary-2400
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
goods
ggplot(data = goods,aes(x =MarketName, y= MonthlyCost,label=MarketName)) +
geom_point() +geom_text_repel(aes(label=MarketName))
ggplot(data = goods,aes(x =RunningShoes, y= Boots,label=MarketName)) +
geom_point() +geom_text_repel(aes(label=MarketName))
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
head(goods)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/flights_final')
shiny::runApp()
