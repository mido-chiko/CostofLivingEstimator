}else{
d.1 = d.0
ni = raw$Response
market.name = raw[,1]
}
########simple estiamte of standard deviation of market i#######
si= (d.1[,2] - d.1[,3])/4
yidot  = d.1[,1]
######################################
I =length(yidot)
ydotdot = sum(ni*yidot)/sum(ni)
########################################################################################
mse = sum((ni-1)*si^2)/sum(ni-1)
msb = sum(ni*(yidot - ydotdot)^2)/(I-1)
###################### method 2) DerSimonian approach to estimate tau2, sigma2, and muh ###############
######### if min = max, use smallest si ###############
si[si == 0] = min(si[si!=0])
wi = 1/si^2
c0 = sum(wi) - sum(wi^2)/sum(wi)
df = I -1
ydotdots = sum(wi*yidot)/sum(wi)
q0 =sum(wi*(yidot - ydotdots)^2)
tau2 = ifelse(q0>df,(q0 - df)/c0,0)
sigma2 = mse
wis = 1/(si^2 + tau2)
muh = sum(wis*yidot)/sum(wis)
############################# method 1 ) anova approach to estimate tau2, sigma2, and muh, if dersimonian has tau2=0 use anova #####################
if (tau2 == 0){
n0 = ((sum(ni))^2 -sum(ni^2))/((I-1)*sum(ni))
tau2 = (msb - mse)/n0
sigma2 = mse
muh = ydotdot
}
###################### values required to calcualte p-values are : yidot, tau2, sigma2, ni, muh#########
#####################################  calculate the p-values #########
sig2 = tau2 + sigma2/ni
z.score= (yidot - muh)/sqrt(sig2 )
##################### two-sided p-value ##############
pv  = 2*pnorm(q = abs(z.score),lower.tail = F)
############ p-value adjustment ###################
# pv.adj = p.adjust(pv, method = "BH")
########################################################
################### merge to the market name ###########
dd = data.frame(market.name,pv)
market.name.all = raw[1]
res = merge(market.name.all,dd, by.x = "Market",by.y="market.name", all = T)
############ sorted ################
res  = res[order(res$Market),]
return(res)
# sum(pv<0.05)
# sum(pv.adj<0.05)
}
varlist
lme.dersi=function(j){
(var = varlist[j])
d.0 = raw[,c(tmp0[j], tmp0[j]+1, tmp0[j]+2)]
na.row0 =unique(which(is.na(d.0),arr.ind=TRUE)[1])
if (!is.na(na.row0)){
d.1 = na.omit(d.0)
ni = raw$Response[-c(na.row)]
market.name = raw[-c(na.row),1]
}else{
d.1 = d.0
ni = raw$Response
market.name = raw[,1]
}
########simple estiamte of standard deviation of market i#######
si= (d.1[,2] - d.1[,3])/4
yidot  = d.1[,1]
######################################
I =length(yidot)
ydotdot = sum(ni*yidot)/sum(ni)
########################################################################################
mse = sum((ni-1)*si^2)/sum(ni-1)
msb = sum(ni*(yidot - ydotdot)^2)/(I-1)
###################### method 2) DerSimonian approach to estimate tau2, sigma2, and muh ###############
######### if min = max, use smallest si ###############
si[si == 0] = min(si[si!=0])
wi = 1/si^2
c0 = sum(wi) - sum(wi^2)/sum(wi)
df = I -1
ydotdots = sum(wi*yidot)/sum(wi)
q0 =sum(wi*(yidot - ydotdots)^2)
tau2 = ifelse(q0>df,(q0 - df)/c0,0)
sigma2 = mse
wis = 1/(si^2 + tau2)
muh = sum(wis*yidot)/sum(wis)
############################# method 1 ) anova approach to estimate tau2, sigma2, and muh, if dersimonian has tau2=0 use anova #####################
if (tau2 == 0){
n0 = ((sum(ni))^2 -sum(ni^2))/((I-1)*sum(ni))
tau2 = (msb - mse)/n0
sigma2 = mse
muh = ydotdot
}
###################### values required to calcualte p-values are : yidot, tau2, sigma2, ni, muh#########
#####################################  calculate the p-values #########
sig2 = tau2 + sigma2/ni
z.score= (yidot - muh)/sqrt(sig2 )
##################### two-sided p-value ##############
pv  = 2*pnorm(q = abs(z.score),lower.tail = F)
############ p-value adjustment ###################
# pv.adj = p.adjust(pv, method = "BH")
########################################################
################### merge to the market name ###########
dd = data.frame(market.name,pv)
market.name.all = raw[1]
res = merge(market.name.all,dd, by.x = "Market",by.y="market.name", all = T)
############ sorted ################
res  = res[order(res$Market),]
return(res)
# sum(pv<0.05)
# sum(pv.adj<0.05)
}
################### start analysis ####################
market.name.all = sort(raw$Market)
out = NULL
for (i in 1:length(tmp0)){
print(i)
res = lme.dersi(j = i)
out = cbind(out,res$pv)
}
out0 = cbind(levels(market.name.all), out)
colnames(out0) = c("Market", varlist)
################## write the result to the file #############
file0 = "Market_pv_lme_unadjusted"
(fn =paste0(outdir, file0,Sys.Date(),".csv"))
write.csv(out0, file= fn, row.names = F)
v
fn =paste0(outdir, file0,Sys.Date(),".csv")
fn
write.csv(out0, file= fn, row.names = F)
write.csv("Market_pv_lme_unadjusted", file= fn, row.names = F)
outdir
file0
out0
out
market.name.all = sort(raw$Market)
out = NULL
for (i in 1:length(tmp0)){
print(i)
res = lme.dersi(j = i)
out = cbind(out,res$pv)
}
sig2 = tau2 + sigma2/ni
if (tau2 == 0){
n0 = ((sum(ni))^2 -sum(ni^2))/((I-1)*sum(ni))
tau2 = (msb - mse)/n0
sigma2 = mse
muh = ydotdot
}
si[si == 0] = min(si[si!=0])
wi = 1/si^2
c0 = sum(wi) - sum(wi^2)/sum(wi)
df = I -1
ydotdots = sum(wi*yidot)/sum(wi)
q0 =sum(wi*(yidot - ydotdots)^2)
tau2 = ifelse(q0>df,(q0 - df)/c0,0)
sigma2 = mse
wis = 1/(si^2 + tau2)
muh = sum(wis*yidot)/sum(wis)
lme.dersi=function(j){
(var = varlist[j])
d.0 = raw[,c(tmp0[j], tmp0[j]+1, tmp0[j]+2)]
na.row0 =unique(which(is.na(d.0),arr.ind=TRUE)[1])
if (!is.na(na.row0)){
d.1 = na.omit(d.0)
ni = raw$Response[-c(na.row)]
market.name = raw[-c(na.row),1]
}else{
d.1 = d.0
ni = raw$Response
market.name = raw[,1]
}
lme.dersi=function(j){
(var = varlist[j])
d.0 = raw[,c(tmp0[j], tmp0[j]+1, tmp0[j]+2)]
na.row0 =unique(which(is.na(d.0),arr.ind=TRUE)[1])
if (!is.na(na.row0)){
d.1 = na.omit(d.0)
ni = raw$Response[-c(na.row)]
market.name = raw[-c(na.row),1]
}else{
d.1 = d.0
ni = raw$Response
market.name = raw[,1]
}
########simple estiamte of standard deviation of market i#######
si= (d.1[,2] - d.1[,3])/4
yidot  = d.1[,1]
######################################
I =length(yidot)
ydotdot = sum(ni*yidot)/sum(ni)
########################################################################################
mse = sum((ni-1)*si^2)/sum(ni-1)
msb = sum(ni*(yidot - ydotdot)^2)/(I-1)
###################### method 2) DerSimonian approach to estimate tau2, sigma2, and muh ###############
######### if min = max, use smallest si ###############
si[si == 0] = min(si[si!=0])
wi = 1/si^2
c0 = sum(wi) - sum(wi^2)/sum(wi)
df = I -1
ydotdots = sum(wi*yidot)/sum(wi)
q0 =sum(wi*(yidot - ydotdots)^2)
tau2 = ifelse(q0>df,(q0 - df)/c0,0)
sigma2 = mse
wis = 1/(si^2 + tau2)
muh = sum(wis*yidot)/sum(wis)
############################# method 1 ) anova approach to estimate tau2, sigma2, and muh, if dersimonian has tau2=0 use anova #####################
if (tau2 == 0){
n0 = ((sum(ni))^2 -sum(ni^2))/((I-1)*sum(ni))
tau2 = (msb - mse)/n0
sigma2 = mse
muh = ydotdot
}
###################### values required to calcualte p-values are : yidot, tau2, sigma2, ni, muh#########
#####################################  calculate the p-values #########
sig2 = tau2 + sigma2/ni
z.score= (yidot - muh)/sqrt(sig2 )
##################### two-sided p-value ##############
pv  = 2*pnorm(q = abs(z.score),lower.tail = F)
############ p-value adjustment ###################
# pv.adj = p.adjust(pv, method = "BH")
########################################################
################### merge to the market name ###########
dd = data.frame(market.name,pv)
market.name.all = raw[1]
res = merge(market.name.all,dd, by.x = "Market",by.y="market.name", all = T)
############ sorted ################
res  = res[order(res$Market),]
return(res)
# sum(pv<0.05)
# sum(pv.adj<0.05)
}
market.name.all = sort(raw$Market)
out = NULL
for (i in 1:length(tmp0)){
print(i)
res = lme.dersi(j = i)
out = cbind(out,res$pv)
}
na.row0 =unique(which(is.na(d.0),arr.ind=TRUE)[1])
d.0 = raw[,c(tmp0[j], tmp0[j]+1, tmp0[j]+2)]
d.0 = raw[,c(tmp0[varlist], tmp0[varlist]+1, tmp0[varlist]+2)]
market.name.all = sort(raw$Market)
market.name.all
out = NULL
for (i in 1:length(tmp0)){
print(i)
res = lme.dersi(j = i)
out = cbind(out,res$pv)
}
for (i in 1:length(tmp0)){
print(i)
res = lme.dersi(j = i)
out = cbind(out,res$pv)
}
tmp0
length(tmp0)
for (i in 1:length(tmp0)){
print(i)
res = lme.dersi(j = i)
out = cbind(out,res$pv)
}
lme.dersi=function(j){
(var = varlist[j])
d.0 = raw[,c(tmp0[j], tmp0[j]+1, tmp0[j]+2)]
na.row0 =unique(which(is.na(d.0),arr.ind=TRUE)[1])
if (!is.na(na.row0)){
d.1 = na.omit(d.0)
ni = raw$Response[-c(na.row)]
market.name = raw[-c(na.row),1]
}else{
d.1 = d.0
ni = raw$Response
market.name = raw[,1]
}
########simple estiamte of standard deviation of market i#######
si= (d.1[,2] - d.1[,3])/4
yidot  = d.1[,1]
######################################
I =length(yidot)
ydotdot = sum(ni*yidot)/sum(ni)
########################################################################################
mse = sum((ni-1)*si^2)/sum(ni-1)
msb = sum(ni*(yidot - ydotdot)^2)/(I-1)
###################### method 2) DerSimonian approach to estimate tau2, sigma2, and muh ###############
######### if min = max, use smallest si ###############
si[si == 0] = min(si[si!=0])
wi = 1/si^2
c0 = sum(wi) - sum(wi^2)/sum(wi)
df = I -1
ydotdots = sum(wi*yidot)/sum(wi)
q0 =sum(wi*(yidot - ydotdots)^2)
tau2 = ifelse(q0>df,(q0 - df)/c0,0)
sigma2 = mse
wis = 1/(si^2 + tau2)
muh = sum(wis*yidot)/sum(wis)
############################# method 1 ) anova approach to estimate tau2, sigma2, and muh, if dersimonian has tau2=0 use anova #####################
if (tau2 == 0){
n0 = ((sum(ni))^2 -sum(ni^2))/((I-1)*sum(ni))
tau2 = (msb - mse)/n0
sigma2 = mse
muh = ydotdot
}
###################### values required to calcualte p-values are : yidot, tau2, sigma2, ni, muh#########
#####################################  calculate the p-values #########
sig2 = tau2 + sigma2/ni
z.score= (yidot - muh)/sqrt(sig2 )
##################### two-sided p-value ##############
pv  = 2*pnorm(q = abs(z.score),lower.tail = F)
############ p-value adjustment ###################
# pv.adj = p.adjust(pv, method = "BH")
########################################################
################### merge to the market name ###########
dd = data.frame(market.name,pv)
market.name.all = raw[1]
res = merge(market.name.all,dd, by.x = "Market",by.y="market.name", all = T)
############ sorted ################
res  = res[order(res$Market),]
return(res)
# sum(pv<0.05)
# sum(pv.adj<0.05)
}
market.name.all = sort(raw$Market)
out = NULL
for (i in 1:length(tmp0)){
print(i)
res = lme.dersi(j = i)
out = cbind(out,res$pv)
}
lme.dersi=function(j){
(var = varlist[j])
d.0 = raw[,c(tmp0[j], tmp0[j]+1, tmp0[j]+2)]
na.row0 =unique(which(is.na(d.0),arr.ind=TRUE)[1])
if (!is.na(na.row0)){
d.1 = na.omit(d.0)
ni = raw$Response[-c(na.row)]
market.name = raw[-c(na.row),1]
}else{
d.1 = d.0
ni = raw$Response
market.name = raw[,1]
}
########simple estiamte of standard deviation of market i#######
si= (d.1[,2] - d.1[,3])/4
yidot  = d.1[,1]
######################################
I =length(yidot)
ydotdot = sum(ni*yidot)/sum(ni)
########################################################################################
mse = sum((ni-1)*si^2)/sum(ni-1)
msb = sum(ni*(yidot - ydotdot)^2)/(I-1)
###################### method 2) DerSimonian approach to estimate tau2, sigma2, and muh ###############
######### if min = max, use smallest si ###############
si[si == 0] = min(si[si!=0])
wi = 1/si^2
c0 = sum(wi) - sum(wi^2)/sum(wi)
df = I -1
ydotdots = sum(wi*yidot)/sum(wi)
q0 =sum(wi*(yidot - ydotdots)^2)
tau2 = ifelse(q0>df,(q0 - df)/c0,0)
sigma2 = mse
wis = 1/(si^2 + tau2)
muh = sum(wis*yidot)/sum(wis)
############################# method 1 ) anova approach to estimate tau2, sigma2, and muh, if dersimonian has tau2=0 use anova #####################
if (tau2 == 0){
n0 = ((sum(ni))^2 -sum(ni^2))/((I-1)*sum(ni))
tau2 = (msb - mse)/n0
sigma2 = mse
muh = ydotdot
}
###################### values required to calcualte p-values are : yidot, tau2, sigma2, ni, muh#########
#####################################  calculate the p-values #########
sig2 = tau2 + sigma2/ni
z.score= (yidot - muh)/sqrt(sig2 )
##################### two-sided p-value ##############
pv  = 2*pnorm(q = abs(z.score),lower.tail = F)
############ p-value adjustment ###################
# pv.adj = p.adjust(pv, method = "BH")
########################################################
################### merge to the market name ###########
dd = data.frame(market.name,pv)
market.name.all = raw[1]
res = merge(market.name.all,dd, by.x = "Market",by.y="market.name", all = T)
############ sorted ################
res  = res[order(res$Market),]
return(res)
# sum(pv<0.05)
# sum(pv.adj<0.05)
}
market.name.all = sort(raw$Market)
out = NULL
for (i in 1:length(tmp0)){
print(i)
res = lme.dersi(j = i)
out = cbind(out,res$pv)
}
lme.dersi=function(j){
(var = varlist[j])
d.0 = raw[,c(tmp0[j], tmp0[j]+1, tmp0[j]+2)]
na.row0 =unique(which(is.na(d.0),arr.ind=TRUE)[1])
if (!is.na(na.row0)){
d.1 = na.omit(d.0)
ni = raw$Response[-c(na.row0)]
market.name = raw[-c(na.row0),1]
}else{
d.1 = d.0
ni = raw$Response
market.name = raw[,1]
}
########simple estiamte of standard deviation of market i#######
si= (d.1[,2] - d.1[,3])/4
yidot  = d.1[,1]
######################################
I =length(yidot)
ydotdot = sum(ni*yidot)/sum(ni)
########################################################################################
mse = sum((ni-1)*si^2)/sum(ni-1)
msb = sum(ni*(yidot - ydotdot)^2)/(I-1)
###################### method 2) DerSimonian approach to estimate tau2, sigma2, and muh ###############
######### if min = max, use smallest si ###############
si[si == 0] = min(si[si!=0])
wi = 1/si^2
c0 = sum(wi) - sum(wi^2)/sum(wi)
df = I -1
ydotdots = sum(wi*yidot)/sum(wi)
q0 =sum(wi*(yidot - ydotdots)^2)
tau2 = ifelse(q0>df,(q0 - df)/c0,0)
sigma2 = mse
wis = 1/(si^2 + tau2)
muh = sum(wis*yidot)/sum(wis)
############################# method 1 ) anova approach to estimate tau2, sigma2, and muh, if dersimonian has tau2=0 use anova #####################
if (tau2 == 0){
n0 = ((sum(ni))^2 -sum(ni^2))/((I-1)*sum(ni))
tau2 = (msb - mse)/n0
sigma2 = mse
muh = ydotdot
}
###################### values required to calcualte p-values are : yidot, tau2, sigma2, ni, muh#########
#####################################  calculate the p-values #########
sig2 = tau2 + sigma2/ni
z.score= (yidot - muh)/sqrt(sig2 )
##################### two-sided p-value ##############
pv  = 2*pnorm(q = abs(z.score),lower.tail = F)
############ p-value adjustment ###################
# pv.adj = p.adjust(pv, method = "BH")
########################################################
################### merge to the market name ###########
dd = data.frame(market.name,pv)
market.name.all = raw[1]
res = merge(market.name.all,dd, by.x = "Market",by.y="market.name", all = T)
############ sorted ################
res  = res[order(res$Market),]
return(res)
# sum(pv<0.05)
# sum(pv.adj<0.05)
}
market.name.all = sort(raw$Market)
out = NULL
for (i in 1:length(tmp0)){
print(i)
res = lme.dersi(j = i)
out = cbind(out,res$pv)
}
out0 = cbind(levels(market.name.all), out)
colnames(out0) = c("Market", varlist)
write.csv(out0, file= fn, row.names = F)
write.csv(out0, "Market_pv_lme_unadjusted.csv", row.names = F)
rm(list  =ls())
workdir ="~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject/real_data_raj_pmatrix"
outdir =paste0(workdir,"output/")
datadir =paste0(workdir,"data/")
codedir =paste0(workdir,"code/")
setwd(workdir)
getwd()
source("~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject/real_data_raj_pmatrix/LRTPois.R")
source("~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject/real_data_raj_pmatrix/pv_comb_funcs.R")
infile ="Market_pv_lme_unadjusted"
raw = read.csv(file = paste0(outdir,infile, ".csv"))
raw = read.csv("Market_pv_lme_unadjusted.csv")
setwd("~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject/real_data_raj_pmatrix/market_raj")
raw = read.csv("Market_pv_lme_unadjusted.csv")
summary(raw)
pv.matrix = raw
apply(pv.matrix[-1], 1, function(x){sum(x<0.05)})
(pv.lrt = pvm.lrt(pmatrix = data.frame(pv.matrix) , thred = 0.1,N.emp = 10000))
(pv.fisher = pvm.fisher.boot(n.boot= 1000, pmatrix= pv.matrix, epis = 1e-5))
(file0 = "Market_LRT_")
(fn =paste0(outdir, file0,Sys.Date(),".csv"))
write.csv(pv.lrt, file= fn, row.names = F)
write.csv(pv.lrt,"Market_LRT",row.names = F)
write.csv(pv.lrt,"Market_LRT",row.names = F)
out = merge(pv.lrt,pv.fisher,by=c("SITENAME"))
out1 = out[,c("SITENAME","pv.mlr","pv.fisher")]
write.csv(out1, "Final_P_Value_Test", row.names = F)
pv.lrt
pv.fisher
out1 = out[,c("Market","pv.mlr","pv.fisher")]
out = merge(pv.lrt,pv.fisher,by=c("Market"))
out1 = out[,c("Market","pv.mlr","pv.fisher")]
write.csv(out1, "Final_P_Value_Test", row.names = F)
write.csv(pv.lrt,"Market_LRT.csv",row.names = F)
write.csv(pv.fisher,"Market_Fisher_.csv",row.names = F)
write.csv(out1, "Final_P_Value_Test.csv", row.names = F)
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject')
runApp('~/R/Code/IRR Data Science Build/Shiny Apps/CostofLivingProject')
